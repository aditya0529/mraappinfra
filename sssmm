AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Creates a Lambda function that generates SSM Automation Documents for ECS:
    - Stop all tasks in all tagged services
    - Stop a selected ECS service
    - Stop a specific ECS task
    - Start a selected ECS service

Parameters:
  ClusterName:
    Type: String
    Description: ECS Cluster to target

  SSMTagKey:
    Type: String
    Default: SSMRunbook
    Description: Tag key to filter ECS services

  SSMTagValue:
    Type: String
    Default: 'true'
    Description: Tag value to filter ECS services

Resources:

  RunbookGeneratorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ssm-runbook-generator-role-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RunbookGeneratorPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:ListServices
                  - ecs:ListTasks
                  - ecs:ListTagsForResource
                  - ecs:UpdateService
                  - ssm:CreateDocument
                  - ssm:UpdateDocument
                Resource: '*'

  SSMAutomationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ssm-automation-execution-role-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SSMAutomationEcsPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:ListServices
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - ecs:DescribeServices
                  - ecs:StopTask
                  - ecs:UpdateService
                Resource: '*'

  SSMRunbookGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ssm-runbook-generator-${AWS::StackName}
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt RunbookGeneratorLambdaRole.Arn
      Timeout: 300
      Environment:
        Variables:
          CLUSTER: !Ref ClusterName
          TAG_KEY: !Ref SSMTagKey
          TAG_VALUE: !Ref SSMTagValue
      Code:
        ZipFile: |
          import os, json, boto3

          ecs = boto3.client('ecs')
          ssm = boto3.client('ssm')

          CLUSTER = os.environ['CLUSTER']
          TAG_KEY = os.environ['TAG_KEY']
          TAG_VALUE = os.environ['TAG_VALUE']

          def list_tagged_services():
              arns = ecs.list_services(cluster=CLUSTER)['serviceArns']
              result = []
              for arn in arns:
                  name = arn.rsplit('/', 1)[-1]
                  tags = ecs.list_tags_for_resource(resourceArn=arn).get('tags', [])
                  if any(t['key'] == TAG_KEY and t['value'] == TAG_VALUE for t in tags):
                      result.append(name)
              return result

          def doc_stop_all_tasks(service_list):
              return {
                  "schemaVersion": "0.3",
                  "description": f"Stop all ECS tasks in each tagged service in cluster {CLUSTER}",
                  "parameters": {
                      "AutomationAssumeRole": {
                          "type": "String",
                          "description": "(Required) IAM role that SSM should assume to stop tasks"
                      }
                  },
                  "assumeRole": "{{ AutomationAssumeRole }}",
                  "mainSteps": [
                      {
                          "name": "LoopServices",
                          "action": "aws:loop",
                          "inputs": {
                              "Iterators": service_list,
                              "IteratorDataType": "String",
                              "Steps": [
                                  {
                                      "name": "ListTasks",
                                      "action": "aws:executeAwsApi",
                                      "inputs": {
                                          "Service": "ecs",
                                          "Api": "listTasks",
                                          "cluster": CLUSTER,
                                          "serviceName": "{{ LoopServices.CurrentIteratorValue }}"
                                      },
                                      "outputs": [
                                          {
                                              "Name": "TaskArns",
                                              "Selector": "$.taskArns",
                                              "Type": "StringList"
                                          }
                                      ]
                                  },
                                  {
                                      "name": "StopTasks",
                                      "action": "aws:executeScript",
                                      "inputs": {
                                          "Runtime": "python3.11",
                                          "Handler": "stop_tasks",
                                          "InputPayload": {
                                              "cluster": CLUSTER,
                                              "tasks": "{{ ListTasks.TaskArns }}"
                                          },
                                          "Script": (
                                              "def stop_tasks(event, context):\n"
                                              "  import boto3\n"
                                              "  ecs = boto3.client('ecs')\n"
                                              "  for task in event['tasks']:\n"
                                              "    ecs.stop_task(cluster=event['cluster'], task=task)\n"
                                              "  return {'stopped': len(event['tasks'])}"
                                          )
                                      }
                                  }
                              ]
                          }
                      }
                  ]
              }

          def doc_stop_one_service(service_list):
              return {
                  "schemaVersion": "0.3",
                  "description": f"Set desiredCount=0 for a chosen service in {CLUSTER}",
                  "parameters": {
                      "ServiceName": {
                          "type": "String",
                          "description": "ECS service to stop",
                          "allowedValues": service_list
                      }
                  },
                  "mainSteps": [
                      {
                          "name": "StopService",
                          "action": "aws:executeAwsApi",
                          "inputs": {
                              "Service": "ecs",
                              "Api": "updateService",
                              "cluster": CLUSTER,
                              "service": "{{ ServiceName }}",
                              "desiredCount": 0
                          }
                      }
                  ]
              }

          def doc_stop_one_task():
              return {
                  "schemaVersion": "0.3",
                  "description": f"Stop a given ECS task on cluster {CLUSTER}",
                  "parameters": {
                      "TaskArn": {
                          "type": "String",
                          "description": "ARN of the ECS task to stop"
                      }
                  },
                  "mainSteps": [
                      {
                          "name": "StopTask",
                          "action": "aws:executeAwsApi",
                          "inputs": {
                              "Service": "ecs",
                              "Api": "stopTask",
                              "cluster": CLUSTER,
                              "task": "{{ TaskArn }}"
                          }
                      }
                  ]
              }

          def doc_start_one_service(service_list):
              return {
                  "schemaVersion": "0.3",
                  "description": f"Start a chosen ECS service on cluster {CLUSTER} by setting desiredCount > 0",
                  "parameters": {
                      "ServiceName": {
                          "type": "String",
                          "description": "ECS service to start",
                          "allowedValues": service_list
                      },
                      "DesiredCount": {
                          "type": "Integer",
                          "description": "Number of tasks to run",
                          "default": 2
                      }
                  },
                  "mainSteps": [
                      {
                          "name": "StartService",
                          "action": "aws:executeAwsApi",
                          "inputs": {
                              "Service": "ecs",
                              "Api": "updateService",
                              "cluster": CLUSTER,
                              "service": "{{ ServiceName }}",
                              "desiredCount": "{{ DesiredCount }}"
                          }
                      }
                  ]
              }

          def upsert(name, body):
              try:
                  ssm.create_document(
                      Name=name,
                      DocumentType='Automation',
                      DocumentFormat='JSON',
                      Content=json.dumps(body)
                  )
              except ssm.exceptions.DocumentAlreadyExists:
                  ssm.update_document(
                      Name=name,
                      DocumentVersion='$LATEST',
                      DocumentFormat='JSON',
                      Content=json.dumps(body)
                  )

          def handler(event, context):
              services = list_tagged_services()
              upsert(f'SSM-ECS-StopAllTasks-{CLUSTER}', doc_stop_all_tasks(services))
              upsert(f'SSM-ECS-StopService-{CLUSTER}', doc_stop_one_service(services))
              upsert(f'SSM-ECS-StopTask-{CLUSTER}', doc_stop_one_task())
              upsert(f'SSM-ECS-StartService-{CLUSTER}', doc_start_one_service(services))
              return {"status": "SSM documents created/updated"}
